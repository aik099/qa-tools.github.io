{"name":"QA-Tools","tagline":"Library that provides easy-to-use way of interaction with web-page elements in functional tests using PageObject pattern.","body":"Quality assurance utilities for functional tests.\r\n\r\nLibrary implements [Page Object Pattern](docs/PageObjectPattern.md), used in variety of testing frameworks (e.g. Selenium browser automation framework).\r\n\r\nRequired dependencies:\r\n\r\n* [behat/mink](https://github.com/Behat/Mink) - for browser interaction\r\n* [mindplay/annotations](https://github.com/mindplay-dk/php-annotations) - for annotation handling\r\n\r\n## aik099\\QATools\\PageObject\r\nNo internal dependencies.\r\n\r\nImplementation of Page Object pattern as done in Selenium Java library.\r\n\r\n### Class Overview\r\n\r\n\r\n| Name | Description |\r\n| ------------- | ------------- |\r\n| `\\aik099\\QATools\\PageObject\\Page` | Abstract class for creating dedicated classes for each of the website pages, that needs to be tested (descendant of [DocumentElement](http://mink.behat.org/api/behat/mink/element/documentelement.html)). |\r\n| `\\aik099\\QATools\\PageObject\\Element\\WebElement` | Class for interacting with __one__ element on page (descendant of [NodeElement](http://mink.behat.org/api/behat/mink/element/nodeelement.html)). |\r\n| `\\aik099\\QATools\\PageObject\\Element\\ElementContainer` | Abstract class for creating dedicated classes, that will encapsulate associated elements on a page. |\r\n\r\n### Annotation Overview\r\n\r\n| Name | Description |\r\n| ------------- | ------------- |\r\n| `@find-by` | Tells how to find element on a page. |\r\n| `@page-url` | Sets default url, associated with a Page. |\r\n\r\n### Usage\r\n\r\n1. create subclass from `\\aik099\\QATools\\PageObject\\Page` class\r\n2. add class properties, that have `\\aik099\\QATools\\PageObject\\Element\\WebElement` or `\\aik099\\QATools\\PageObject\\Element\\ElementContainer` in their `@var` annotation\r\n3. create public method(-s), that would use properties defined before\r\n\r\n[Continue to Examples](docs/PageObject.md)\r\n\r\n## aik099\\QATools\\HtmlElements\r\nDepends on `aik099\\QATools\\PageObject`.\r\n\r\nThis library solves major problem with PageObject implementation, that original library had - each element had all methods and even ones, that have no effect on element itself. For example a `setValue` method existed for a H1 tag.\r\n\r\n### Class Overview\r\n\r\n| Name | Description |\r\n| ------------- | ------------- |\r\n| `\\aik099\\QATools\\HtmlElements\\TypifiedPage` | Abstract class for creating dedicated classes for each of website pages, that needs to be tested. |\r\n| `\\aik099\\QATools\\HtmlElements\\TypifiedElement` | Base class for all other elements in this library, that wraps around WebElement and only exposes methods, that are common for all elements. |\r\n| `\\aik099\\QATools\\HtmlElements\\ElementContainer` | Abstract class for creating dedicated classes, that will encapsulate associated elements on a page (typified version of `\\aik099\\QATools\\PageObject\\ElementContainer`). |\r\n| `\\aik099\\QATools\\HtmlElements\\LabeledElement` | Element, that has associated LABEL element on a page (e.g. radio button or a checkbox). |\r\n| `\\aik099\\QATools\\HtmlElements\\Button` | Button. |\r\n| `\\aik099\\QATools\\HtmlElements\\Checkbox` | Checkbox. |\r\n| `\\aik099\\QATools\\HtmlElements\\Form` | Form. |\r\n| `\\aik099\\QATools\\HtmlElements\\Link` | Link. |\r\n| `\\aik099\\QATools\\HtmlElements\\RadioGroup` | Group of radio buttons. |\r\n| `\\aik099\\QATools\\HtmlElements\\Select` | Dropdown. |\r\n| `\\aik099\\QATools\\HtmlElements\\TextBlock` | Div or span. |\r\n| `\\aik099\\QATools\\HtmlElements\\TextInput` | Text box or text area. |\r\n| `\\aik099\\QATools\\HtmlElements\\FileInput` | Single file upload. |\r\n\r\n### Annotation Overview\r\n\r\n| Name | Description |\r\n| ------------- | ------------- |\r\n| `@name` | Sets optional element name to be used instead of ClassName in error messages (e.g. when element was not found on a page). |\r\n\r\n### Usage\r\n\r\n1. create subclass from `\\aik099\\QATools\\HtmlElements\\TypifiedPage` class\r\n2. add class properties, that have `\\aik099\\QATools\\PageObject\\Element\\WebElement` or any other element class described above in their `@var` annotation\r\n3. create public method, that would use properties defined before\r\n\r\n[Continue to Examples](docs/HtmlElements.md)\r\n\r\n## aik099\\QATools\\BEM\r\nDepends on `aik099\\QATools\\PageObject`.\r\n\r\nAccording to BEM methodology (http://bem.info/) the following restrictions apply:\r\n\r\n1. there can't be nested blocks\r\n2. each element must be placed within a block\r\n\r\nBut single HTML node (or it's element) can be within different blocks at same time.\r\n\r\n### Class Overview\r\n\r\n| Name | Description |\r\n| ------------- | ------------- |\r\n| `\\aik099\\QATools\\BEM\\Element\\Element` | Represents a single element on a page, that must be placed within a Block. |\r\n| `\\aik099\\QATools\\BEM\\Element\\Block` | Abstract class for creating dedicated classes, that will encapsulate associated elements on a page. |\r\n\r\n### Annotation Overview\r\n\r\n| Name | Description |\r\n| ------------- | ------------- |\r\n| `@bem` | Unified annotation for both Block and Element. |\r\n\r\n### Usage\r\n\r\n1. create a subclass from `\\aik099\\QATools\\BEM\\Element\\Block` class to for each block on a page\r\n2. add class properties, that have `\\aik099\\QATools\\BEM\\Element\\Element` in their `@var` annotation for each individual element in each block (or alternatively use `$this->getElements` method in the `Block` class)\r\n3. create subclass from `\\aik099\\QATools\\BEM\\BEMPage` class\r\n4. add class property with previously created block subclass name in it's `@var` annotation for each individual block\r\n\r\n[Continue to Examples](docs/BEM.md)\r\n\r\n## Using Composer\r\n\r\n1. Define the dependencies in your ```composer.json```:\r\n```json\r\n{\r\n\t\"require\": {\r\n\t\t\"aik099/qa-tools\": \"dev-master\"\r\n\t}\r\n}\r\n```\r\n\r\n2. Install/update your vendors:\r\n```bash\r\n$ curl http://getcomposer.org/installer | php\r\n$ php composer.phar install\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}